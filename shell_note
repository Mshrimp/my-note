

1.3 变量和环境变量

Bash中，变量的值都是以字符串的形式存储。

变量赋值：
var=value
var：变量名，value：赋给变量的值，如果value包含任何空白字符，那么他需要使用单引号或双引号进行引用。

var=value
var = value
是两种不同的操作，前者是赋值操作，后者是相等操作。

在变量名前加上$，就可以打印出变量值，如：
value="value"
echo $var
或者
echo ${var}

可以在printf和echo命令的双引号中引用变量值，如：
fruit=apple
count=5
echo "We have $count ${fruit}(s)"

环境变量
环境变量是未在当前进程中定义，而从父进程中继承而来的变量。
export使用来设置环境变量的，从当前shell执行的任何程序都会继承这个变量。

PATH通常定义在/etc/environment或/etc/profile或~/.bashrc中，如果要在PATH中添加新路径，各目录路径之间用冒号分隔开，如：
export PATH="$PATH:/home/user/bin"
或者
PATH="$PATH:/home/user/bin"
export PATH

技巧：
1. 获取变量值字符串的长度，即字符串的字节数
length=${#var}
如：
var=123456789
echo ${#var}

2. 识别当前的shell版本
echo $SHELL
或者
echo $0

3. 检查当前用户是否是超级用户
root用户的UID是0
如：
if [ $UID -ne 0 ]; then
echo No root user, Please run as root
else
echo "Root user"
fi

4. 修改Bash提示字符串（username@hostname:~$）
默认的shell提示文本是在文件~/.bashrc中的PS1环境变量来设置的，如：
$ cat ~/.bashrc | grep PS1
设置提示字符串：
$ PS1="PROMPT>"
可以使用\e[1;31m的转义序列来设置彩色提示字符串，还有特殊字符可以扩展成系统参数，如：
\u可以扩展为用户名
\h可以扩展为主机名
\w可以扩展为当前工作目录


1.4 通过shell进行数学运算
基本的算数操作
let
(())
[]
高级操作
expr
bc


当使用let时，变量名之前不需要添加$，例如：
no1=4
no2=5
let resut=no1+no2
let no1++
let no1--
let no1+=6
let no1-=6

result=$[ no1 + no2 ]
result=$[ $no1 + 5 ]

在使用(())时，变量名之前需要加上$，如：
result=$(( no1 + 5 ))

expr
result=`expr 3 + 4`
result=$(expr $no1 + 5)

以上这些算法只能用于整数运算，不支持浮点运算。

bc
bc工具可以执行浮点数运算，并应用一些高级函数，如：
echo "4 * 0.56" | bc

no=54
result=`echo "$no * 1.5" | bc`

1. 设定小数精度
参数scale=2将小数位个数设置为2，如：
echo "scale=2;3/8" | bc

2. 进制转换
no=100
echo "obase=2;$no" | bc

no=1100100
echo "obase=10;ibase=2;$no" | bc

3. 计算平方及平方根
echo "sqrt(100)" | bc
echo "10^10" | bc



1.5 文件描述符和重定向
最常见的文件描述符是：
stdin----0	标准输入
stdout----1	标准输出
stderr----2	标准错误

将输出文本重定向或保存到一个文件中，如：
echo "This is a sample text 1" > temp.txt
在echo命令输出之前，temp.txt文件会先被清空。
echo "This is a sample text 2" >> temp.txt
将文本输出追加到目标文件末尾。
>和>>并不相同，前者会先清空文件再写入内容，后者会将内容追加到现有文件的尾部。

使用重定向操作符时，重定向内容不会出现在终端，而是直接导入到文件。重定向操作默认使用标准输出，即：
>等同于1>，>>等同于1>>

执行成功和不成功的命令：
当一个命令发生错误并退回时，它会返回一个非0的退出状态；当命令成功完成时，它会返回数字0。退出状态可以从特殊变量$?中获得（在命令执行之后运行echo $?，可以打印出退出状态）。






