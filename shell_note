

1.3 变量和环境变量

Bash中，变量的值都是以字符串的形式存储。

变量赋值：
var=value
var：变量名，value：赋给变量的值，如果value包含任何空白字符，那么他需要使用单引号或双引号进行引用。

var=value
var = value
是两种不同的操作，前者是赋值操作，后者是相等操作。

在变量名前加上$，就可以打印出变量值，如：
value="value"
echo $var
或者
echo ${var}

可以在printf和echo命令的双引号中引用变量值，如：
fruit=apple
count=5
echo "We have $count ${fruit}(s)"

环境变量
环境变量是未在当前进程中定义，而从父进程中继承而来的变量。
export使用来设置环境变量的，从当前shell执行的任何程序都会继承这个变量。

PATH通常定义在/etc/environment或/etc/profile或~/.bashrc中，如果要在PATH中添加新路径，各目录路径之间用冒号分隔开，如：
export PATH="$PATH:/home/user/bin"
或者
PATH="$PATH:/home/user/bin"
export PATH

技巧：
1. 获取变量值字符串的长度，即字符串的字节数
length=${#var}
如：
var=123456789
echo ${#var}

2. 识别当前的shell版本
echo $SHELL
或者
echo $0

3. 检查当前用户是否是超级用户
root用户的UID是0
如：
if [ $UID -ne 0 ]; then
echo No root user, Please run as root
else
echo "Root user"
fi

4. 修改Bash提示字符串（username@hostname:~$）
默认的shell提示文本是在文件~/.bashrc中的PS1环境变量来设置的，如：
$ cat ~/.bashrc | grep PS1
设置提示字符串：
$ PS1="PROMPT>"
可以使用\e[1;31m的转义序列来设置彩色提示字符串，还有特殊字符可以扩展成系统参数，如：
\u可以扩展为用户名
\h可以扩展为主机名
\w可以扩展为当前工作目录


1.4 通过shell进行数学运算
基本的算数操作
let
(())
[]
高级操作
expr
bc






